'use strict';

const path = require('path');
const kit = require('@nuxt/kit');
const express = require('express');
const supabaseJs = require('@supabase/supabase-js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const path__default = /*#__PURE__*/_interopDefaultLegacy(path);
const express__default = /*#__PURE__*/_interopDefaultLegacy(express);

const authHandler = (moduleOptions) => {
  const { supabaseKey, supabaseUrl, supabaseOptions } = moduleOptions;
  const app = express__default();
  const supabase = supabaseJs.createClient(supabaseUrl, supabaseKey, supabaseOptions);
  app.use(express__default.json());
  app.use("/set-auth-cookie", async (req, res) => {
    supabase.auth.api.setAuthCookie(req, res);
    return "auth cookie set";
  });
  return app;
};

const nuxtModule = kit.defineNuxtModule({
  meta: {
    name: "nuxt-supabase",
    configKey: "supabase"
  },
  setup(resolvedOptions, nuxtApp) {
    kit.addServerMiddleware({
      path: "/api/auth",
      handler: authHandler(resolvedOptions)
    });
    kit.addPluginTemplate({
      src: path__default.resolve(__dirname, "templates/cookie.client.mjs"),
      filename: "supabase-cookie.js",
      options: resolvedOptions
    });
    kit.addPluginTemplate({
      src: path__default.resolve(__dirname, "templates/plugin.mjs"),
      filename: "supabase.js",
      options: resolvedOptions
    });
  }
});
module.exports.meta = require("../package.json");

module.exports = nuxtModule;
