import { createError, defineLazyEventHandler, useBody } from "h3";
import { getHighlighter, BUNDLED_LANGUAGES, BUNDLED_THEMES } from "shiki-es";
import mdcTMLanguage from "../../assets/mdc.tmLanguage.json";
import { useRuntimeConfig } from "#imports";
const resolveLang = (lang) => BUNDLED_LANGUAGES.find((l) => l.id === lang || l.aliases?.includes(lang))?.id;
const resolveTheme = (theme) => BUNDLED_THEMES.find((t) => t === theme);
const resolveBody = (body) => {
  if (typeof body.code !== "string") {
    throw createError({ statusMessage: "Bad Request", statusCode: 400, message: "Missing code key." });
  }
  return {
    code: body.code.replace(/\n+$/, ""),
    lang: resolveLang(body.lang),
    theme: resolveTheme(body.theme)
  };
};
export default defineLazyEventHandler(async () => {
  const { theme, preload } = useRuntimeConfig().content.highlight;
  const highlighter = await getHighlighter({
    theme: theme || "dark-plus",
    langs: [
      ...preload || ["json", "js", "ts", "css"],
      "shell",
      "html",
      "md",
      "yaml",
      {
        id: "md",
        scopeName: "text.markdown.mdc",
        path: "mdc.tmLanguage.json",
        aliases: ["markdown"],
        grammar: mdcTMLanguage
      }
    ]
  });
  return async (event) => {
    const params = await useBody(event);
    const { code, lang, theme: theme2 } = resolveBody(params);
    if (!lang) {
      return [[{ content: code }]];
    }
    if (!highlighter.getLoadedLanguages().includes(lang)) {
      await highlighter.loadLanguage(lang);
    }
    if (theme2 && !highlighter.getLoadedThemes().includes(theme2)) {
      await highlighter.loadTheme(theme2);
    }
    const highlightedCode = highlighter.codeToThemedTokens(code, lang, theme2);
    for (const line of highlightedCode) {
      for (const token of line) {
        delete token.fontStyle;
        delete token.explanation;
      }
    }
    return highlightedCode;
  };
});
