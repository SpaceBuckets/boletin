import { PropType } from 'vue';
import type { SortParams } from '../types';
declare const _default: import("vue").DefineComponent<{
    /**
     * The path of the content to load from content source.
     */
    path: {
        type: StringConstructor;
        required: false;
        default: any;
    };
    /**
     * Select a subset of fields
     */
    only: {
        type: PropType<string[]>;
        required: false;
        default: any;
    };
    /**
     * Remove a subset of fields
     */
    without: {
        type: PropType<string[]>;
        required: false;
        default: any;
    };
    /**
     * Filter results
     */
    where: {
        type: PropType<{
            [key: string]: any;
        }>;
        required: false;
        default: any;
    };
    /**
     * Sort results
     */
    sort: {
        type: PropType<SortParams>;
        required: false;
        default: any;
    };
    /**
     * Limit number of results
     */
    limit: {
        type: PropType<number>;
        required: false;
        default: any;
    };
    /**
     * Skip number of results
     */
    skip: {
        type: PropType<number>;
        required: false;
        default: any;
    };
    /**
     * Filter contents based on locale
     */
    locale: {
        type: PropType<string>;
        required: false;
        default: any;
    };
    /**
     * A type of query to be made.
     */
    find: {
        type: PropType<"surround" | "one">;
        required: false;
        default: any;
    };
}, {
    isPartial: any;
    data: any;
    refresh: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The path of the content to load from content source.
     */
    path: {
        type: StringConstructor;
        required: false;
        default: any;
    };
    /**
     * Select a subset of fields
     */
    only: {
        type: PropType<string[]>;
        required: false;
        default: any;
    };
    /**
     * Remove a subset of fields
     */
    without: {
        type: PropType<string[]>;
        required: false;
        default: any;
    };
    /**
     * Filter results
     */
    where: {
        type: PropType<{
            [key: string]: any;
        }>;
        required: false;
        default: any;
    };
    /**
     * Sort results
     */
    sort: {
        type: PropType<SortParams>;
        required: false;
        default: any;
    };
    /**
     * Limit number of results
     */
    limit: {
        type: PropType<number>;
        required: false;
        default: any;
    };
    /**
     * Skip number of results
     */
    skip: {
        type: PropType<number>;
        required: false;
        default: any;
    };
    /**
     * Filter contents based on locale
     */
    locale: {
        type: PropType<string>;
        required: false;
        default: any;
    };
    /**
     * A type of query to be made.
     */
    find: {
        type: PropType<"surround" | "one">;
        required: false;
        default: any;
    };
}>>, {
    sort: any;
    find: "surround" | "one";
    where: any;
    only: string[];
    without: string[];
    skip: number;
    limit: number;
    path: string;
    locale: string;
}>;
export default _default;
