import type { Parent } from 'mdast-util-to-markdown/lib/types';
declare const _default: {
    unsafe: ({
        character: string;
        inConstruct: string[];
        before?: undefined;
        after?: undefined;
        atBreak?: undefined;
    } | {
        before: string;
        character: string;
        after: string;
        inConstruct: string[];
        atBreak?: undefined;
    } | {
        atBreak: boolean;
        character: string;
        after: string;
        inConstruct?: undefined;
        before?: undefined;
    })[];
    handlers: {
        containerComponent: typeof containerComponent;
        textComponent: typeof textComponent;
        componentContainerSection: typeof componentContainerSection;
    };
};
export default _default;
declare type NodeComponentContainerSection = Parent & {
    name: string;
};
declare function componentContainerSection(node: NodeComponentContainerSection, _: any, context: any): string;
declare type NodeTextComponent = Parent & {
    name: string;
    rawData: string;
};
declare function textComponent(node: NodeTextComponent, _: any, context: any): string;
declare type NodeContainerComponent = Parent & {
    name: string;
    fmAttributes?: Record<string, any>;
};
declare function containerComponent(node: NodeContainerComponent, _: any, context: any): string;
declare namespace containerComponent {
    var peek: () => string;
}
