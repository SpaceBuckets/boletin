import { joinURL, withLeadingSlash, withoutTrailingSlash } from "ufo";
import { hash } from "ohash";
import { useHead, useCookie } from "#app";
import { createQuery } from "../query/query.mjs";
import { jsonStringify } from "../utils/json.mjs";
import { withContentBase } from "./utils.mjs";
export const queryFetch = (params) => {
  const apiPath = withContentBase(process.dev ? "/query" : `/query/${hash(params)}`);
  if (!process.dev && process.server) {
    useHead({
      link: [
        { rel: "prefetch", href: apiPath }
      ]
    });
  }
  return $fetch(apiPath, {
    method: "GET",
    responseType: "json",
    params: {
      _params: jsonStringify(params),
      previewToken: useCookie("previewToken").value
    }
  });
};
export function queryContent(query, ...pathParts) {
  if (typeof query === "string") {
    let path = withLeadingSlash(withoutTrailingSlash(joinURL(query, ...pathParts)));
    path = path.replace(/[-[\]{}()*+.,^$\s]/g, "\\$&");
    return createQuery(queryFetch).where({ _path: new RegExp(`^${path}`) });
  }
  return createQuery(queryFetch, query);
}
